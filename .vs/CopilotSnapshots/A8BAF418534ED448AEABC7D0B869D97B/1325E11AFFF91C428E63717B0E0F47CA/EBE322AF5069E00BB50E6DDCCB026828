const urlBase = 'http://137.184.185.65/LAMPAPI';
const extension = 'php';

let userId = 0;
let firstName = "";
let lastName = "";

//==============================================
// authentication functions
//==============================================

function doLogin()
{
	userId = 0;
	firstName = "";
	lastName = "";
	
	let login = document.getElementById("loginName").value.trim();
	let password = document.getElementById("loginPassword").value;
	
	document.getElementById("loginResult").innerHTML = "";

	// validate required fields
	if (!login || !password) {
		document.getElementById("loginResult").innerHTML = "Username and password are required.";
		return;
	}

	let hash = md5(password);
	let tmp = {login:login, password:hash};
	let jsonPayload = JSON.stringify(tmp);
	
	let url = urlBase + '/Login.' + extension;

	let xhr = new XMLHttpRequest();
	xhr.open("POST", url, true);
	xhr.setRequestHeader("Content-type", "application/json; charset=UTF-8");
	try
	{
		xhr.onreadystatechange = function() 
		{
			if (this.readyState == 4) 
			{
				if (this.status == 200) 
				{
					try {
						let jsonObject = JSON.parse(xhr.responseText);
						userId = jsonObject.id;
				
						if (userId < 1) {
							document.getElementById("loginResult").innerHTML = jsonObject.error || "Login failed - invalid credentials.";
							return;
						}
				
						firstName = jsonObject.firstName;
						lastName = jsonObject.lastName;
						saveCookie();
						window.location.href = "contacts.html";
					} catch (parseErr) {
						document.getElementById("loginResult").innerHTML = "Login failed - server response error.";
					}
				}
				else if (this.status == 401) 
				{
					try {
						let jsonObject = JSON.parse(xhr.responseText);
						document.getElementById("loginResult").innerHTML = jsonObject.error || "Invalid username or password.";
					} catch (parseErr) {
						document.getElementById("loginResult").innerHTML = "Invalid username or password.";
					}
				}
				else if (this.status == 400) 
				{
					try {
						let jsonObject = JSON.parse(xhr.responseText);
						document.getElementById("loginResult").innerHTML = jsonObject.error || "Login request error - please check your input.";
					} catch (parseErr) {
						document.getElementById("loginResult").innerHTML = "Login request error - please check your input.";
					}
				}
				else if (this.status == 500) 
				{
					document.getElementById("loginResult").innerHTML = "Server error - please try again later.";
				}
				else if (this.status == 0) 
				{
					document.getElementById("loginResult").innerHTML = "Network error - unable to connect to server.";
				}
				else 
				{
					document.getElementById("loginResult").innerHTML = "Login failed - unexpected error occurred.";
				}
			}
		};
		xhr.send(jsonPayload);
	}
	catch(err)
	{
		document.getElementById("loginResult").innerHTML = "Login failed: " + err.message;
	}

}

//==============================================

function doLogout()
{
	userId = 0;
	firstName = "";
	lastName = "";
	document.cookie = "firstName= ; expires = Thu, 01 Jan 1970 00:00:00 GMT";
	window.location.href = "index.html";
}

//==============================================

function doRegister()
{
	let firstName = document.getElementById("registerFirstName").value.trim();
	let lastName = document.getElementById("registerLastName").value.trim();
	let username = document.getElementById("registerUsername").value.trim();
	let password = document.getElementById("registerPassword").value;

	let registerResultElement = document.getElementById("registerResult");
	registerResultElement.innerHTML = "";
	registerResultElement.className = ""; // clear any existing classes

	// validate required fields
	if (!firstName || !lastName || !username || !password) {
		registerResultElement.innerHTML = "All fields are required.";
		return;
	}

	if (password.length < 4) {
		registerResultElement.innerHTML = "Password must be at least 4 characters long.";
		return;
	}

	if (username.length < 3) {
		registerResultElement.innerHTML = "Username must be at least 3 characters long.";
		return;
	}

	// hash the password with md5 before sending
	let hash = md5(password);

	let tmp = {
		firstName: firstName,
		lastName: lastName,
		login: username,
		password: hash
	};
	let jsonPayload = JSON.stringify(tmp);

	let url = urlBase + '/CreateUsers.' + extension;

	let xhr = new XMLHttpRequest();
	xhr.open("POST", url, true);
	xhr.setRequestHeader("Content-type", "application/json; charset=UTF-8");
	try
	{
		xhr.onreadystatechange = function() 
		{
			if (this.readyState == 4) 
			{
				if (this.status == 201) 
				{
					try {
						let jsonObject = JSON.parse(xhr.responseText);
						if (jsonObject.error && jsonObject.error !== '') {
							registerResultElement.className = "";
							registerResultElement.innerHTML = jsonObject.error;
						} else {
							// show success message
							registerResultElement.className = "success";
							registerResultElement.innerHTML = `Welcome ${firstName}! Your account has been created successfully. You can now log in with your username: ${username}`;
							
							// clear form fields
							document.getElementById("registerFirstName").value = "";
							document.getElementById("registerLastName").value = "";
							document.getElementById("registerUsername").value = "";
							document.getElementById("registerPassword").value = "";
							
							// show success notification in login section
							showSuccessNotification(firstName, username);
							
							// hide registration form after a delay
							setTimeout(() => {
								document.getElementById("registerDiv").style.display = "none";
								// clear the success message after hiding the form
								setTimeout(() => {
									registerResultElement.innerHTML = "";
									registerResultElement.className = "";
								}, 500);
							}, 3000);
						}
					} catch (parseErr) {
						registerResultElement.className = "success";
						registerResultElement.innerHTML = "Registration successful! You may now log in.";
						showSuccessNotification(firstName, username);
						setTimeout(() => {
							document.getElementById("registerDiv").style.display = "none";
						}, 2000);
					}
				}
				else if (this.status == 409) 
				{
					registerResultElement.className = "";
					try {
						let jsonObject = JSON.parse(xhr.responseText);
						registerResultElement.innerHTML = jsonObject.error || "Username already exists. Please choose a different username.";
					} catch (parseErr) {
						registerResultElement.innerHTML = "Username already exists. Please choose a different username.";
					}
				}
				else if (this.status == 400) 
				{
					registerResultElement.className = "";
					try {
						let jsonObject = JSON.parse(xhr.responseText);
						registerResultElement.innerHTML = jsonObject.error || "Registration failed - invalid input data.";
					} catch (parseErr) {
						registerResultElement.innerHTML = "Registration failed - invalid input data.";
					}
				}
				else if (this.status == 500) 
				{
					registerResultElement.className = "";
					try {
						let jsonObject = JSON.parse(xhr.responseText);
						registerResultElement.innerHTML = jsonObject.error || "Server error - please try again later.";
					} catch (parseErr) {
						registerResultElement.innerHTML = "Server error - please try again later.";
					}
				}
				else if (this.status == 0) 
				{
					registerResultElement.className = "";
					registerResultElement.innerHTML = "Network error - unable to connect to server.";
				}
				else 
				{
					registerResultElement.className = "";
					registerResultElement.innerHTML = "Registration failed - unexpected error occurred.";
				}
			}
		};
		xhr.send(jsonPayload);
	}
	catch(err)
	{
		registerResultElement.className = "";
		registerResultElement.innerHTML = "Registration failed: " + err.message;
	}
}

//==============================================
// session management functions
//==============================================

function saveCookie()
{
	let minutes = 20;
	let date = new Date();
	date.setTime(date.getTime()+(minutes*60*1000));	
	document.cookie = "firstName=" + firstName + ",lastName=" + lastName + ",userId=" + userId + ";expires=" + date.toGMTString();
}

//==============================================

function readCookie()
{
	userId = -1;
	let data = document.cookie;
	let splits = data.split(",");
	for(var i = 0; i < splits.length; i++) 
	{
		let thisOne = splits[i].trim();
		let tokens = thisOne.split("=");
		if( tokens[0] == "firstName" )
		{
			firstName = tokens[1];
		}
		else if( tokens[0] == "lastName" )
		{
			lastName = tokens[1];
		}
		else if( tokens[0] == "userId" )
		{
			userId = parseInt( tokens[1].trim() );
		}
	}
	
	if( userId < 0 )
	{
		window.location.href = "index.html";
	}
	else
	{
		if(document.getElementById("userName")) {
			document.getElementById("userName").innerHTML = "Logged in as " + firstName + " " + lastName;
		}
	}
}

//==============================================
// contact management functions
//==============================================

function addContact()
{
	let newFirstName = document.getElementById("firstNameText").value.trim();
	let newLastName = document.getElementById("lastNameText").value.trim();
	let newEmail = document.getElementById("emailText").value.trim();
	let newPhone = document.getElementById("phoneText").value.trim();
	
	document.getElementById("contactAddResult").innerHTML = "";

	if(!newFirstName || !newLastName) {
		document.getElementById("contactAddResult").innerHTML = "First Name and Last Name are required";
		return;
	}

	let tmp = {
		userId: userId,
		firstName: newFirstName,
		lastName: newLastName,
		email: newEmail,
		phone: newPhone
	};
	let jsonPayload = JSON.stringify( tmp );

	let url = urlBase + '/AddContact.' + extension;
	
	let xhr = new XMLHttpRequest();
	xhr.open("POST", url, true);
	xhr.setRequestHeader("Content-type", "application/json; charset=UTF-8");
	try
	{
		xhr.onreadystatechange = function() 
		{
			if (this.readyState == 4 && this.status == 201) 
			{
				document.getElementById("contactAddResult").innerHTML = "Contact has been added";
				document.getElementById("firstNameText").value = "";
				document.getElementById("lastNameText").value = "";
				document.getElementById("emailText").value = "";
				document.getElementById("phoneText").value = "";
				loadContacts(); // refresh the contact list
			}
			else if (this.readyState == 4) 
			{
				let jsonObject = JSON.parse(xhr.responseText);
				document.getElementById("contactAddResult").innerHTML = jsonObject.error || "Error adding contact";
			}
		};
		xhr.send(jsonPayload);
	}
	catch(err)
	{
		document.getElementById("contactAddResult").innerHTML = err.message;
	}
	
}

//==============================================

function searchContacts()
{
	let srch = document.getElementById("searchText").value;
	document.getElementById("contactSearchResult").innerHTML = "";
	
	let tmp = {search:srch,userId:userId};
	let jsonPayload = JSON.stringify( tmp );

	let url = urlBase + '/SearchContacts.' + extension;
	
	let xhr = new XMLHttpRequest();
	xhr.open("POST", url, true);
	xhr.setRequestHeader("Content-type", "application/json; charset=UTF-8");
	try
	{
		xhr.onreadystatechange = function() 
		{
			if (this.readyState == 4 && this.status == 200) 
			{
				let jsonObject = JSON.parse( xhr.responseText );
				document.getElementById("contactSearchResult").innerHTML = "Contact search completed";
				displayContacts(jsonObject.results);
			}
		};
		xhr.send(jsonPayload);
	}
	catch(err)
	{
		document.getElementById("contactSearchResult").innerHTML = err.message;
	}
}

//==============================================

function loadContacts()
{
	// load all contacts by searching with empty string
	let tmp = {search: "", userId: userId};
	let jsonPayload = JSON.stringify(tmp);

	let url = urlBase + '/SearchContacts.' + extension;
	
	let xhr = new XMLHttpRequest();
	xhr.open("POST", url, true);
	xhr.setRequestHeader("Content-type", "application/json; charset=UTF-8");
	try
	{
		xhr.onreadystatechange = function() 
		{
			if (this.readyState == 4 && this.status == 200) 
			{
				let jsonObject = JSON.parse(xhr.responseText);
				displayContacts(jsonObject.results);
			}
		};
		xhr.send(jsonPayload);
	}
	catch(err)
	{
		console.error("Error loading contacts:", err.message);
	}
}

//==============================================

function displayContacts(contacts)
{
	let contactListDiv = document.getElementById("contactList");
	let contactHtml = "";
	
	if(contacts.length === 0) {
		contactHtml = "<p>No contacts found.</p>";
	} else {
		contactHtml = "<h3>Your Contacts:</h3>";
		contactHtml += "<div class='contacts-grid'>";
		
		for(let i = 0; i < contacts.length; i++) {
			let contact = contacts[i];
			contactHtml += "<div class='contact-card'>";
			contactHtml += "<div class='contact-name'>" + contact.firstName + " " + contact.lastName + "</div>";
			if(contact.email) {
				contactHtml += "<div class='contact-info'>Email: " + contact.email + "</div>";
			}
			if(contact.phone) {
				contactHtml += "<div class='contact-info'>Phone: " + contact.phone + "</div>";
			}
			contactHtml += "<button class='delete-btn' onclick='deleteContact(" + contact.id + ")'>Delete</button>";
			contactHtml += "</div>";
		}
		contactHtml += "</div>";
	}
	
	contactListDiv.innerHTML = contactHtml;
}

//==============================================

function deleteContact(contactId)
{
	if(!confirm("Are you sure you want to delete this contact?")) {
		return;
	}

	let tmp = {id: contactId, userId: userId};
	let jsonPayload = JSON.stringify(tmp);

	let url = urlBase + '/DeleteContact.' + extension;
	
	let xhr = new XMLHttpRequest();
	xhr.open("POST", url, true);
	xhr.setRequestHeader("Content-type", "application/json; charset=UTF-8");
	try
	{
		xhr.onreadystatechange = function() 
		{
			if (this.readyState == 4 && this.status == 200) 
			{
				loadContacts(); // refresh the contact list
			}
			else if (this.readyState == 4)
			{
				let jsonObject = JSON.parse(xhr.responseText);
				alert("Error deleting contact: " + (jsonObject.error || "Unknown error"));
			}
		};
		xhr.send(jsonPayload);
	}
	catch(err)
	{
		alert("Error deleting contact: " + err.message);
	}
}

//==============================================
// utility functions
//==============================================

function showSuccessNotification(firstName, username)
{
	// show a temporary success message in the login section
	let loginResultElement = document.getElementById("loginResult");
	loginResultElement.className = "success";
	loginResultElement.innerHTML = `Account created for ${firstName}! Please log in with username: ${username}`;
	
	// pre-fill the username field for convenience
	document.getElementById("loginName").value = username;
	
	// clear the notification after a delay
	setTimeout(() => {
		loginResultElement.innerHTML = "";
		loginResultElement.className = "";
	}, 5000);
}
