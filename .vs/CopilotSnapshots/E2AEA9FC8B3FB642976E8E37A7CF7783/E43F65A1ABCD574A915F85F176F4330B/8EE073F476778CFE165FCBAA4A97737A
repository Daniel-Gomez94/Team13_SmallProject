<?php
// CORS - allow both origins
header("Access-Control-Allow-Origin: *");
header("Access-Control-Allow-Headers: Content-Type");
header("Access-Control-Allow-Methods: POST, GET, OPTIONS");

// Preflight
if ($_SERVER['REQUEST_METHOD'] === 'OPTIONS') {
  http_response_code(204);
  exit;
}

// Helpers
function sendJson($obj, $status = 200) {
  http_response_code($status);
  header('Content-Type: application/json; charset=utf-8');
  echo json_encode($obj);
  exit;
}

function getJsonBody() {
  $raw = file_get_contents('php://input');
  $data = json_decode($raw, true);
  if ($data === null && json_last_error() !== JSON_ERROR_NONE) {
    sendJson(['error' => 'Invalid JSON body'], 400);
  }
  return $data ?: [];
}

// Read input
$in = getJsonBody();
$firstName = trim($in['firstName'] ?? '');
$lastName  = trim($in['lastName']  ?? '');
$login     = trim($in['login']     ?? '');
$password  = trim($in['password']  ?? '');

// Validate
if ($firstName === '' || $lastName === '' || $login === '' || $password === '') {
  sendJson(['error' => 'All fields are required.'], 400);
}

// DB connect (make sure this matches your other files)
$conn = new mysqli("localhost", "TheBeast", "WeLoveCOP4331", "Smallproject");
if ($conn->connect_error) {
  sendJson(['error' => 'Database connection failed'], 500);
}

// Check duplicate username
$stmt = $conn->prepare("SELECT ID FROM Users WHERE Login = ?");
if (!$stmt) {
  $conn->close();
  sendJson(['error' => 'Prepare failed'], 500);
}
$stmt->bind_param("s", $login);
$stmt->execute();
$stmt->store_result();
if ($stmt->num_rows > 0) {
  $stmt->close();
  $conn->close();
  sendJson(['error' => 'Username already exists.'], 409);
}
$stmt->close();

// Hash password (kept MD5 to match existing Login.php behavior)
$hashed = md5($password);

// Insert user
$stmt = $conn->prepare("INSERT INTO Users (FirstName, LastName, Login, Password) VALUES (?, ?, ?, ?)");
if (!$stmt) {
  $conn->close();
  sendJson(['error' => 'Prepare failed'], 500);
}
$stmt->bind_param("ssss", $firstName, $lastName, $login, $hashed);

if ($stmt->execute()) {
  $newId = $stmt->insert_id;
  $stmt->close();
  $conn->close();
  // Return canonical response used across your API
  sendJson([
    'id'        => (int)$newId,
    'firstName' => $firstName,
    'lastName'  => $lastName,
    'error'     => ''
  ], 201);
} else {
  $err = $stmt->error;
  $stmt->close();
  $conn->close();
  sendJson(['error' => "Insert failed: $err"], 500);
}
